h2. NaturePHP Pack v0.3.6

<small>10/07/2009</small>


*NaturePHP* : "http://naturephp.org":http://naturephp.org



h2. -//######################## README INDEX


* 1: Installation
* 2: Usage
* 3: Included classes (Quick Documentation)
** 3.01: Nphp ...... #Default NaturePhp environment class (loaded directly in init.php)</li>
** 3.02: Log ....... #Error/debug background system</li>
** 3.03: Check ..... #Check stuff (client and server environments, variables correctness, etc)</li>
** 3.04: Utils ..... #Utilities (variable transformations, arrays, options, etc)</li>
** 3.05: Text ...... #Text functionalities (strings, html, words, characters, etc)</li>
** 3.06: Path ...... #Path/url string transformations</li>
** 3.07: Mem ....... #Global cache system (big variables, file cache, etc)</li>
** 3.08: Headers ... #HTTP Headers functionalities</li>
** 3.09: Disk ...... #Filesystem functionalities</li>
** 3.10: Format .... #Measures/conversion/standards</li>
** 3.11: Time ...... #Time and Date functionalities</li>
** 3.12: Template .. #Templates manager class</li>
** 3.13: Database .. #Awesome sql interface (based on dbFacile by greaterscope)</li>
** 3.14: Event ..... #Event/action and filtering functionalities (based on Wordpress add_action and add_filter)</li>
** 3.15: Mail ...... #Email functionalities</li>
** 3.16: Image ..... #Image manipulation class</li>


<small>Notes: 
All [ ] brackets in this readme file indicate code examples (eg. [ @phpinfo();@ ] ).<br />	
All paths, unless otherwise noted, are defined as if you are running an instance (file.php) at a folder in which the "nphp/" subfolder is located.	</small>




h2.	-//######################## 1: INSTALLATION



Requirements:<br />
NaturePHP requires PHP 5+, preferably 5.2+, ideally 5.3+.

# Copy "nphp/" folder to your site's folder (or whatever subfolder you wish).
# Use [ @include('nphp/init.php');@ ] to include NaturePHP's autoloader into you site/app instance.
<small>(or can include it in your header/conf/init file?)</small>



h2. -//######################## 2: USAGE


<ol>
<li>*Using Lib Classes //*<br />
Instance any [ @new Example();@ ] or call [ @Example::Method();@ ] and NaturePHP automatically loads the class for you if not yet loaded.</li>
<li>*Using your own classes //*<br />
All available classes are stored at "nphp/libs/", if you want to use some of your own classes just add them to this folder.<br />
All classes should be standard php classes [ @class Example{ }@ ] at file "Example.php".<br />
Therefore, using a non-loaded class [ @new Example();@ ] in your instance will result in NaturePHP autoloading the file "nphp/libs/Example.php".</li>
<li>*Checking if you are on a NaturePhp enviornment //*<br />
use [ @if(class_exists('Nphp')) print "You're using NaturePhp v".Nphp::version;@ ]</li>
</ol>



h2. -//######################## 3: INCLUDED CLASSES (QUICK DOCUMENTATION)

*Documentation notes:*

the arguments {options} are interpreted via Utils::combine_args() and should be an options array, object, querystring or multiple arguments of the previous types.<br />
(eg. an options example {options} can be defined like [ @array('option1'=>'value1', 'option2'=>$value2)@ ] ).


"self-instanced" and "static" classes do not require to and should NOT be instanced ( [ @$var=new Example();@ ] ).<br />
All methods in these classes should used statically [ @Example::method();@ ] and NOT the instanced way [ @$var->method();@ ]


The rest of the documentation follows most of the rules used at php.net for php itself




h3. -//######################## Nphp


*3.01: Nphp .......... #Default NaturePhp environment class //*

<small>Notes:<br /> 	
You don't really should need to use this class, this is mainly for internal use of the autoloader and management UI.<br />
This class is static</small>

_Methods_

*lib_is_loaded*<br />
// @bool Nphp::lib_is_loaded(string $lib)@<br />
Checks if Class is loaded in the NaturePhp environment<br />
eg. [ @Nphp::lib_is_loaded('N');@ ]


*lib_exists*<br />
// @bool Nphp::lib_exists(string $lib [, $complete_path=false])@<br />
Checks if Class is available in the NaturePhp environment<br />
eg. [ @Nphp::lib_exists('N');@ ]


*nphp_folder*<br />
// @string Nphp::nphp_folder()@<br />
Returns "nphp/" folder full physical path<br />
eg. [ @print Nphp::nphp_folder();@ ]


*lib_path*<br />
// @string Nphp::lib_path(string $lib)@<br />
Return full physical path to file for class $lib<br />
eg. [ @Nphp::lib_path('N');@ ]


*load_lib*<br />
// @void Nphp::load_lib(string $lib [, $complete_path=false])@<br />
Loads a class from NaturePhp's Library (you don't really need to use this, all libs are autoloaded when necessary by default)<br />
eg. [ @Nphp::load_lib('N');@ ]


_Properties_

*version* // NaturePhp core version<br />
eg. [ @if(class_exists('Nphp')) print "You're using NaturePhp v".Nphp::$version;@ ]





h3. -//######################## Log


*3.02: Log .......... #Error/debug background system*

<small>Note: This class is self-instanced</small>

_Methods_

*init*<br />
// @void Log::init([bool $debug=false])@<br />
Initiates the N error control system. <br />
eg. [ @Log::init(true);@ ]


*debug*<br />
// @void Log::debug(bool $debug)@<br />
Use $debug=true for all log content and php errors to be shown on Log::kill(), $debug=true returns a user friendly message.<br />
eg. [ @Log::debug(true);@ ]


*notify*<br />
// @void Log::notify(string $email)@<br />
Notifies the email when fatal error occurs on non-debug mode. <br />
eg. [ @Log::notify('example&#64;example.com');@ ]


*has_warnings*<br />
// @bool Log::has_warnings()@<br />
Check if a WARNING level error has already occurred on this page. <br />
eg. [ @if(Log::has_warnings()) print "there are critical errors already on this page";@ ]


*log*<br />
// @void Log::add(string $where, string $text)@<br />
Logs an application event to the Log instance (trace stack)<br />
eg. [ @Log::add("footer", "The footer has been printed");@ ]


*kill*<br />
// @void Log::kill(string $text)@<br />
Like die(); but prints a pretty error/debug log to the user/developer.<br />
eg. [ @Log::kill("Required file not found");@ ]


<small>Note: after you've initiated N [ @Log::init(bool $debug);@ ] when can use trigger_error() throughout your application/libraries and N will collect your notices and errors and take according action.</small>





h3. -//######################## Check


*3.03: Check .......... #Check stuff (client and server environments, variables correctness, etc)*

<small>Note: This class is static</small>

_Methods_

_common usage_

*http_host*<br />
// @bool Check::http_host(string $http_host)@<br />
Checks if string is a valid email;<br />
eg. [ @if(Check::http_host("example.domain.com")) print "HTTP Host correct!";@ ]


*email*<br />
// @bool Check::is_email(string $email)@<br />
Checks if string is a valid http host;<br />
eg. [ @if(Check::is_email("example@example.com")) print "Email correct!";@ ]


*username*<br />
// @bool Check::username(string $email)@<br />
Checks if string is a valid username (common usage);<br />
eg. [ @if(Check::username("My_Username27")) print "Username correct!";@ ]


*ip_address*<br />
// @bool Check::ip_address(string $ipaddress)@<br />
Checks if string is a valid ipv4 address;<br />
eg. [ @if(Check::ip_address("255.255.255.0")) print "Ip address correct!";@ ]


*hex_color*<br />
// @bool Check::hex_color(string $hex_color)@<br />
Checks if string is a valid hex color;<br />
eg. [ @if(Check::hex_color("#ffcc00")) print "Hex color correct!";@ ]


*phone_number*<br />
// @bool Check::phone_number(string $phone_number)@<br />
Checks if string is a valid phone number;<br />
eg. [ @if(Check::phone_number("(+351) 123 45 67 89")) print "Phone number correct!";@ ]


*url*<br />
// @bool Check::url($url [, $absolute = false])@<br />
Checks if string is a valid url;<br />
eg. [ @if(Check::url("http://my.domain.com/app.php?id=1", true)) print "Url format correct!";@ ]


_Server Type Detection_

*server_is_apache*<br />
// @bool Check::server_is_apache()@<br />
Checks if server is Apache based;<br />
eg. [ @if(Check::server_is_apache()) print "This is an apache based server!";@ ]


*server_is_iis*<br />
// @bool Check::server_is_iis()@<br />
Checks if server is Apache based;<br />
eg. [ @if(Check::server_is_iis()) print "This is a Microsoft IIS server!";@ ]


_Server OS Detection_

*server_is_unix*<br />
// @bool Check::server_is_unix()@<br />
Checks if server is Unix based;<br />
eg. [ @if(Check::server_is_unix()) print "This is an Unix based server!";@ ]


*server_is_windows*<br />
// @bool Check::server_is_windows()@<br />
Checks if server is Windows based;<br />
eg. [ @if(Check::server_is_windows()) print "This is a Windows based server!";@ ]


_Client OS Detection_

*client_is_mac*<br />
// @bool Check::client_is_mac()@<br />
Checks if client is Mac based;<br />
eg. [ @if(Check::client_is_mac()) print "You are on a Mac!";@ ]


*client_is_windows*<br />
// @bool Check::client_is_windows()@<br />
Checks if client is Windows based;<br />
eg. [ @if(Check::client_is_windows()) print "You are on Windows!";@ ]


*client_is_winxp*<br />
// @bool Check::client_is_winxp()@<br />
Checks if client is Windows XP based;<br />
eg. [ @if(Check::client_is_winxp()) print "You are on Windows XP!";@ ]


*client_is_linux*<br />
// @bool Check::client_is_linux()@<br />
Checks if client is Linux based;<br />
eg. [ @if(Check::client_is_linux()) print "You are on Linux!";@ ]


_Client Browser Detection_

*browser_is_lynx*<br />
// @bool Check::browser_is_lynx()@<br />
Checks if browser is Lynx;<br />
eg. [ @if(Check::browser_is_lynx()) print "You are using Lynx!";@ ]


*browser_is_gecko*<br />
// @bool Check::browser_is_gecko()@<br />
Checks if browser is Gecko based;<br />
eg. [ @if(Check::browser_is_gecko()) print "You are using Gecko (Firefox)!";@ ]


*browser_is_ie*<br />
// @bool Check::browser_is_ie()@<br />
Checks if browser is IE;<br />
eg. [ @if(Check::browser_is_ie()) print "You are using IE!";@ ]


*browser_is_opera*<br />
// @bool Check::browser_is_opera()@<br />
Checks if browser is Opera;<br />
eg. [ @if(Check::browser_is_opera()) print "You are using Opera!";@ ]


*browser_is_ns4*<br />
// @bool Check::browser_is_ns4()@<br />
Checks if browser is NS4 based;<br />
eg. [ @if(Check::browser_is_ns4()) print "You are using Netscape!";@ ]


*browser_is_firefox*<br />
// @bool Check::browser_is_firefox()@<br />
Checks if browser is Firefox;<br />
eg. [ @if(Check::browser_is_firefox()) print "You are using Firefox!";@ ]


*browser_is_webkit*<br />
// @bool Check::browser_is_webkit()@<br />
Checks if browser is Webkit based;<br />
eg. [ @if(Check::browser_is_webkit()) print "You are using Webkit!";@ ]


*browser_is_safari*<br />
// @bool Check::browser_is_safari()@<br />
Checks if browser is Safari;<br />
eg. [ @if(Check::browser_is_safari()) print "You are using Safari!";@ ]


*browser_is_chrome*<br />
// @bool Check::browser_is_chrome()@<br />
Checks if browser is Google Chrome;<br />
eg. [ @if(Check::browser_is_chrome()) print "You are using Chrome!";@ ]


_Request type detection_

*request_is_ajax*<br />
// @bool Check::request_is_ajax()@<br />
Checks if request was made in ajax;<br />
eg. [ @if(Check::request_is_ajax()) print "You are requesting via Ajax!";@ ]


*request_is_ssl*<br />
// @bool Check::request_is_ssl()@<br />
Checks if request was made in SSL (https);<br />
eg. [ @if(Check::request_is_ssl()) print "You are requesting via SSL (https)!";@ ]


_Requested format detection_

*is_json_requested*<br />
// @bool Check::is_json_requested()@<br />
Checks if JSON output is requested;<br />
eg. [ @if(Check::is_json_requested()) print "You are requesting JSON content!";@ ]


*is_javascript_requested*<br />
// @bool Check::is_javascript_requested()@<br />
Checks if JSON output is requested;<br />
eg. [ @if(Check::is_javascript_requested()) print "You are requesting JS content!";@ ]


*is_xhtml_requested*<br />
// @bool Check::is_xhtml_requested()@<br />
Checks if XHTML output is requested;<br />
eg. [ @if(Check::is_xhtml_requested()) print "You are requesting XHTML content!";@ ]


*is_html_requested*<br />
// @bool Check::is_html_requested()@<br />
Checks if HTML output is requested;<br />
eg. [ @if(Check::is_html_requested()) print "You are requesting HTML content!";@ ]


*is_xml_requested*<br />
// @bool Check::is_xml_requested()@<br />
Checks if XML output is requested;<br />
eg. [ @if(Check::is_xml_requested()) print "You are requesting XML content!";@ ]


_generic functions_

*request_accepts*<br />
// @bool Check::request_accepts(string $output)@<br />
Checks if request accepts type of $output;<br />
eg. [ @if(Check::request_accepts("binary")) print "You are accepting binary content!";@ ]


*request_inHeader*<br />
// @bool Check::request_inHeader(string $header, string $needle)@<br />
Checks if $needle exists in request headers $header;<br />
eg. [ @if(Check::request_inHeader("Accept", "binary")) print "You are accepting binary content!";@ ]





h3. -//######################## Utils


*3.04: Utils	.......... #Utilities (variable transformations, arrays, options, etc)*

<small>Note: This class is static</small>

_Methods_

*mixed_to_array*<br />
// @array Utils::mixed_to_array(mixed $mixed)@<br />
transforms mixed variables (querystring, object or array) into "$item=>$value" array;<br />
eg. [ @Utils::mixed_to_array("tag=input&type=text&name=test&value=testing it");@ ]


*combine_args*<br />
// @array Utils::combine_args(array $function_args, int $start_index, array $defaults)@<br />
combines function mixed arguments set with default variables, returns as object;<br />
eg. [ @Utils::combine_args(func_get_args(), 1, array("type"=>"text", "value"=>"test"));@ ]


*s_var_dump*<br />
// @string Utils::s_var_dump(mixed $var)@<br />
all famous var_dump in pretty string form;<br />
eg. [ @Utils::s_var_dump(array("type"=>"text", "value"=>"test", "intval"=>27));@ ]


*build_querystring*<br />
// @string Utils::build_querystring(array $get_as_array)@<br />
builds querystring from array (supports multi-dimensional arrays);<br />
eg. [ @Utils::build_querystring(array("type"=>"text", "value"=>"test"));@ ]


*array_insert*<br />
// @string Utils::array_insert(array &$original_array, mixed $insert_piece, mixed $position)@<br />
inserts value into specific array position, shifts higher items as necessary - overwrites position if $position is string;<br />
eg. [ @Utils::array_insert($array, 'test', 3);@ ]


*array_ikey_exists*<br />
// @mixed Utils::array_ikey_exists(mixed $needle, array $haystack)@<br />
same as array_key_exists() but case insensitive, returns key if found, false if not;<br />
eg. [ @Utils::array_ikey_exists("Test", array("joe"=>1, "test"=>2));@ ]


*generate_password*<br />
// @string Utils::generate_password([{options} $options])@<br />
generates password with random characters from a possible string;<br />
available {options} - int 'lenght', bool 'repeat', string 'possible'<br />
length defaults to 8, possible characters defaults to "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"<br />
eg. [ @Utils::generate_password(array('length'=>15));@ ]





h3. -//######################## Text


*3.05: Text .......... #Text functionalities (strings, html, words, characters, etc)*

<small>Note: This class is static</small>

_Methods_

*str_replace_count*<br />
// @string Text::str_replace_count(string $needle, string $replacement, string $haystack, int $replacements_number)@<br />
Better str_replace() with items nr to replace support;<br />
eg. [ @Text::str_replace_count(".", ",", "my email. email.name@domain.com", 1);@ ]


*filter_nr_words*<br />
// @string Text::filter_nr_words(string $text, int $number_of_words, bool &$has_more)@<br />
returns specific number of words from a text (strips html), $has_more will indicate if more words remain on the original string;<br />
eg. [ @Text::filter_nr_words("this is some random text to examplify this function", 5, $has_more);@ ]


*correct_html_urls*<br />
// @string Text::correct_html_urls(string $html_content, string $html_file_path)@<br />
filters all src, bgimage, href and css's url() in html string through Path::url_to;<br />
eg. [ @Text::correct_html_urls($html_content, "path/to/source_file.html");@ ]


*simple_spaces*<br />
// @string Text::simple_spaces(string $str)@<br />
remove extras spaces, tabs, etc.<br />
eg. [ @Text::simple_spaces(" Hello,   World	!");@ ]


*to_javascript*<br />
// @string Text::to_javascript(string $str)@<br />
convert a string to a safe javascript string<br />
eg. [ @Text::to_javascript("Hi!\n I'm Joe.");@ ]


*to_plain*<br />
// @string Text::to_plain(string $str)@<br />
convert an html string to plain text<br />
eg. [ @Text::to_plain("Hi!<br /> I'm <em>Joe</em>.");@ ]


*to_plain_simple*<br />
// @string Text::to_plain_simple(string $str)@<br />
plain simple - to_plain followed by simple_spaces<br />
eg. [ @Text::to_plain_simple("Hi!   <br />	I'm  <em>Joe</em>.");@ ]


*to_html*<br />
// @string Text::to_html(string $str)@<br />
convert a plain text string to html<br />
eg. [ @Text::to_html("Hi!\nI'm Joe.");@ ]


*normalize*<br />
// @string Text::normalize(string $str)@<br />
converts most accented international characters to the correspondent simple charater<br />
eg. [ @Text::normalize("Atenção! Estão a ler um exemplo Português!");@ ]





h3. -//######################## Path


*3.06: Path .......... #Path/url string transformations*

<small>Note: This class is self-instanced</small>

_Methods_

*to*<br />
// @string Path::to(string $relative_path, string $current_location)@<br />
returns physical path to relative location;<br />
eg. [ @Path::to("../folder/my_file.html", __FILE__);@ ]


*url_to*<br />
// @string Path::url_to(string $relative_path, string $current_location)@<br />
returns url path to relative location;<br />
eg. [ @Path::url_to("../folder/my_file.php", __FILE__);@ ]


*put*<br />
// @void Path::put(string $relative_path, string $current_location)@<br />
short for [ @print Path::url_to("file.html");@ ]


*myBase*<br />
// @string Path::myBase()@<br />
get's current application instance location;<br />
eg. [ @Path::myBase();@ ]


*setBase*<br />
// @void Path::setBase(string $path)@<br />
set's current application instance location;<br />
eg. [ @Path::setBase(string $path);@ ]


*combine*<br />
// @string Path::combine(string $base_relative_path, string $relative_path [, bool $case_sensitive ])@<br />
combine $base_relative_path as base with $relative_path to get new fullpath;<br />
eg. [ @Path::combine("../app_folder/", "app_subfolder/somefile.inc");@ ]


*relative*<br />
// @string Path::relative(string $pathFrom, string $pathTo [, bool $case_sensitive ])@<br />
get relative path from $pathFrom to $pathTo;<br />
eg. [ @Path::relative("app_folder/", "app_folder/app_subfolder/file.php");@ ]


*this_url*<br />
// @string Path::this_url([{options} $options])@<br />
get current url, allowing get inclusions and/or exclusions;<br />
available {options} - array 'get_in', array 'get_out', string '#'<br />
eg. [ @Path::this_url(array('get_in'=>array('id'=>21,'page'=>3), 'get_out'=>array('return', 'user_login'), '#'=>'top'));@ ]


*sanitize_url*<br />
// @string Path::sanitize_url(string $url)@<br />
clean uri string;<br />
eg. [ @Path::sanitize_url("http;//wWw.example.com/exam|ple.%0dphp");@ ]





h3. -//####################### Mem


*3.07: Mem .......... #Global cache system (big variables, file cache, etc)*

<small>Note: This class is self-instanced</small>

_Methods_

_actions_

*set*<br />
// @bool Mem::set(var $key, var $value, string $pool)@<br />
set's value associated with this key, in this pool;<br />
eg. [ @Mem::set("my_location/example.txt", file_get_contents("my_location/example.txt"), "file_pool");@ ]


*get*<br />
// @var Mem::get(var $key, string $pool [, bool $required=false])@<br />
get's value associated with this key, in this pool;<br />
eg. [ @Mem::get("my_location/example.txt", "some_file_pool");@ ]


*lock*<br />
// @bool Mem::lock(var $key, string $pool)@<br />
locks's this key, in this pool;<br />
eg. [ @Mem::lock("my_location/example.txt", "some_file_pool");@ ]


*unlock*<br />
// @bool Mem::unlock(var $key, string $pool)@<br />
unlock's this key, in this pool;<br />
eg. [ @Mem::unlock("my_location/example.txt", "some_file_pool");@ ]

_by reference_

*getRef*<br />
// @bool Mem::setRef(var $key, var &$value, string $pool)@<br />
set's value associated with this key by reference, in this pool;<br />
eg. [ @Mem::setRef("some_object", $my_object, "some_objects_pool");@ ]


*setRef*<br />
// @reference &Mem::getRef(var $key, string $pool [, bool $required=false])@<br />
get's referenced value associated with this key, in this pool;<br />
eg. [ @Mem::getRef("my_location/example.txt", "some_file_pool");@ ]

_checks_

*is_locked*<br />
// @bool Mem::is_locked(var $key, string $pool)@<br />
check's if this key is locked, in this pool;<br />
eg. [ @if(Mem::is_locked("my_location/example.txt", "some_file_pool")) print "content 'my_location/example.txt' is locked!";@ ]


*is_set*<br />
// @bool Mem::is_set(var $key, string $pool)@<br />
check's if this key is set, in this pool;<br />
eg. [ @if(Mem::is_set("my_location/example.txt", "some_file_pool")) print "content 'my_location/example.txt' is already set!";@ ]





h3. -//######################## Headers


*3.08: Headers .......... #HTTP Headers functionalities*

<small>Note: This class is static</small>

_Methods_

*redirect*<br />
// @void Headers::redirect(string $relative_path_or_url [, string $current_location])@<br />
redirect function;<br />
eg. [ @Headers::redirect("../", __FILE__);@ ]


*http_status*<br />
// @bool Headers::http_status(int $status_number)@<br />
set headers for http status (403, 500, 404, etc);<br />
eg. [ @Headers::http_status(500);@ ]


*json*<br />
// @void Headers::json([{options} $options])@<br />
set's appropriate json headers;<br />
available {options} - string $mode, int $cache<br />
eg. [ @Headers::json(array("mode" => "text", "cache"=>864000));@ ]


*cache*<br />
// @void Headers::cache([int $offset=864000])@<br />
set's caching headers;<br />
eg. [ @Headers::cache(432000);@ ]


*nocache*<br />
// @void Headers::nocache()@<br />
set's appropriate no caching headers;<br />
eg. [ @Headers::nocache();@ ]


*javascript*<br />
// @void Headers::javascript([int $cache=0])@<br />
set's javascript headers;<br />
eg. [ @Headers::javascript();@ ]


*gzip*<br />
// @void Headers::gzip()@<br />
set's gzip content headers;<br />
eg. [ @Headers::gzip();@ ]


*get_http_status_desc*<br />
// @string Headers::get_http_status_desc(int $status_number)@<br />
get http status code description;<br />
eg. [ @Headers::get_http_status_desc(500);@ ]


*get_all*<br />
// @array Headers::get_all()@<br />
Better getallheaders() for unsupported servers;<br />
eg. [ @var_dump(Headers::get_all());@ ]





h3. -//######################## Disk


*3.09: Disk .......... #Filesystem functionalities*

<small>Note: This class is static</small>

_Methods_

*make_dir*<br />
// @bool Disk::make_dir(string $folder)@<br />
Make new directory (recursively, if possible);<br />
eg. [ @Disk::make_dir("nphp/manage/includes");@ ]


*sanitize_file_name*<br />
// @string Disk::sanitize_file_name(string $filename)@<br />
make sure new filename is simple and has standard characters;<br />
eg. [ @Disk::sanitize_file_name("nphp/manage/includes/test.php");@ ]





h3. -//######################## Format


*3.10: Format .......... #Measures/conversion/standards*

<small>Note: This class is static</small>

_Methods_

*byte_size*<br />
// @string Format::byte_size(number $bytes, int $decimals = 0)@<br />
auto-format byte size - returns rounded KB, MB, TB, etc;<br />
eg. [ @Format::byte_size(1024);@ ]


*number_i18n*<br />
// @string Format::number_i18n(number $number, int $decimals = 0)@<br />
number format in i18n (eg. 10.000,05);<br />
eg. [ @Format::number_i18n(10000.05, 2);@ ]




h3. -//######################## Time


*3.11: Time .......... #Time and Date functionalities*

<small>Note: This class is static</small>

_Methods_

*mysql_time*<br />
// @string Time::mysql_time(hours $gmt_offset = 0)@<br />
mysql formated time - same as NOW() within mysql;<br />
eg. [ @Time::mysql_time();@ ]


*stopwatch_start*<br />
// @void Time::stopwatch_start(string $name)@<br />
starts microtimer;<br />
eg. [ @Time::stopwatch_start('MyTimer');@ ]


*stopwatch_read*<br />
// @int Time::stopwatch_read(string $name)@<br />
reads microtimer, returns microtime passed since Time::stopwatch_start;<br />
eg. [ @Time::stopwatch_read('MyTimer');@ ]


*stopwatch_stop*<br />
// @int Time::stopwatch_stop(string $name)@<br />
stops microtimer, returns microtime passed since Time::stopwatch_start;<br />
eg. [ @Time::stopwatch_stop('MyTimer');@ ]





h3. -//######################## Template


*3.12: Template .......... #Templates manager class*

_Methods_

*Template*<br />
// @instance Template::__contruct([{options} $options])@<br />
Create a template instance;<br />
available {options} - string $file, string $string, string $part, string $mode, bool $cache, string $content, bool $correct_paths<br />
eg. [ @$Template_instance = new Template(array('file' => "site_source/index.html", 'mode'=>'html'));@ ]


*addContent*<br />
// @string Template::addContent(string $key, string $content)@<br />
Replaces template part (identifiable by tpl keys[1]);<br />
eg. [ @$Template_instance->addContent("key", "this is the key's content replacement");@ ]


*render*<br />
// @string Template::render()@<br />
returns rendered current instance;<br />
eg. [ @$Template_instance->render();@ ]


<small>Notes:</small>

fn1. Within the template, keys can be defined as "{#key/}" or "{#key}some content example{#/key}" (similar to xhtml's "@<tag/>@" and "@<tag>content</tag>@"). <br />
<small>Instead of "{}" you can use 'mode' specific comments (e.g. html "@<!-//key/-->@", javascript "/*#key*/some content/*#/key*/", etc)</small>




h3. -//######################## Database


*3.13: Database .......... #sql interface (originally based on dbFacile by greaterscope)*

_Methods_

_instance function_

*open*<br />
// @instance Database::open({options})@<br />
creates a new database connection;<br />
available {options}<br />
* string 'type', string 'database', string 'user', string 'password', string 'port',string 'host',
* string 'charset', string 'collation', string 'name', resource 'resource',
* string 'dsn', string 'dsn_type', string 'cursor_type'
eg. [ @$Database_inst = Database::open(array('type'=>'mysql', 'database'=>'database_name', 'user'=>'myUser', 'password'=>'myPwd');@ ]

_classic dbFacile functions_

*execute*<br />
// @bool Database::execute(string $sql_query [, array $parameters = array() [, bool $cache = true]])@<br />
executes a query in the database;<br />
eg. [ @$Database_inst->execute("update users set password=md5(?) where user_id=?", array($newUserPwd, $user_id));@ ]


*fetch*<br />
// @array[][] Database::fetch(string $sql_query [, array $parameters = array()])@<br />
returns database's select resultset in vector table;<br />
eg. [ @$portuguese_users = $Database_inst->fetch("select from users where location=? and  is_active=? order by user_id desc limit 2", array('Portugal', true));@ ]<br />
[ @$portuguese_users@ ] results like: <br />
* [ @array('user_id'=>2, 'email'=>'someone@9tree.net', 'password'=>'SOme00MD5ed00ChArS', 'is_active'=>1)@ ];
* [ @array('user_id'=>1, 'email'=>'someother@9tree.net', 'password'=>'SOme00MD5ed00ChArS', 'is_active'=>1)@ ];


*fechRow*<br />
// @array[] Database::fechRow(string $sql_query [, array $parameters = array()])@
return array with first line in database's select resultset;
eg. [ @$user_data = $Database_inst->fechRow("select from users where email=? and password=? limit 1", array($email, $password));@ ]
* [ @$user_data@ ] results like: 
* [ @'user_id'=>2, array('email'=>'someone@9tree.net', 'password'=>'SOme00MD5ed00ChArS', 'is_active'=>1)@ ];


*fetchCell*<br />
// @var Database::fetchCell(string $sql_query [, array $parameters = array()])@<br />
returns first value of first line in database's select resultset;<br />
eg. [ @$user_id = $Database_inst->fetchCell("select user_id from users where email=? and password=md5(?) limit 1", array($email, $password));@ ]


*fetchColumn*<br />
// @array[] Database::fetchColumn(string $sql_query [, array $parameters = array()])@<br />
returns array of first values of each line in database's select resultset;<br />
eg. [ @$emails = $Database_inst->fetchColumn("select email from users where is_active=?", array(true));@ ]<br />
	[ @$emails@ ] results like [ @array($email_1, $email_2, ...., $email_N)@ ];


*fetchKeyValue*<br />
// @array[] Database::fetchKeyValue(string $sql_query [, array $parameters = array()])@<br />
returns array of first values as array keys, and second values as array values<br />
eg. [ @$emailPasswords = $Database_inst->fetchKeyValue("select email, password from users where is_active=?", array(true));@ ]<br />
	[ @$emailPasswords@ ] results like [ @array($email_1=>$password_1, $email_2=>$password_2, ...., $email_N=>$password_N)@ ];


*insert*<br />
// @var Database::insert(array $data, string $table)@<br />
returns inserted id if possible, false on failure;<br />
eg. [ @$Database_inst->insert(array("email"=>$email, $password=>md5($password), is_active=>true), "users");@ ]


_enhanced functions by 9Tree_

*update*<br />
// @int Database::update(array(data), string $table [, {options} $options])@<br />
returns number of updated rows;<br />
available {options} - array where, array group, array order, string limit<br />
eg. [ @$Database_inst->update(array("location"=>"Moon"), "users", array('where'=>array('location=? and is_active=?', 'Portugal', true)));@ ]<br />
	This query is the same as "update users set location='Moon' where location='Portugal' and is_active=1";


*delete*<br />
// @int Template::delete(string $table [, {options} $options])@<br />
returns number of deleted rows;<br />
available {options} - array where, array group, array order, string limit<br />
eg. [ @$Database_inst->delete("users", array('where'=>array('location=? and is_active=?', 'Portugal', true)));@ ]<br />
	This query is the same as "delete from users where location='Portugal' and is_active=1";


_properties_
instance; // last created instance
eg. [ @$Database_inst=&Database::instance;@ ]
	gets the latest Database::open instanced

*instances*; // for holding more than 1 instance<br />
eg. [ @$Database_inst=&Database::instances[0];@ ]<br />
	gets the first Database::open instanced<br />
eg. [ @$Database_inst=&Database::instances['myName'];@ ]<br />
	gets the first Database::open with the option 'name'=>'myName'<br />




h3. -//######################## Event


*3.14: Event	.......... #Event/action and filtering functionalities (based on Wordpress add_action and add_filter)*

<small>Note: This class is static</small>

_Methods_

*add*<br />
// @array Event::add(string $event, function $callback[, $position=false])@<br />
adds callback to execute on event call, optional $position in queue. <br />
eg. [ @Event::add("header_finished", "myFunction");@ ]<br />
	Note: Callback is called internally on Event::fire("header_finished") like myFunction("header_finished");


*fire*<br />
// @array Event::fire(string $event)@<br />
fires all queued event functions in queue order<br />
eg. [ @Event::fire("header_finished");@ ]


*add_filter*<br />
// @string Event::add_filter(string $filter, function $callback[, $position=false])@<br />
adds filtering callback to execute on filter call, optional $position in queue.<br />
eg. [ @Event::add_filter("post_content", "myFunction");@ ]<br />
<small>Note: Callback is called internally on Event::filter("header_finished") like myFunction($str, "header_finished");</small>


*filter*<br />
// @string Event::filter(string $filter, string $str)@<br />
filters string $str through all queued event functions in queue order<br />
eg. [ @Event::filter("post_content", $post_content);@ ]




h3. -//######################## Event


*3.14: Event	.......... #Event/action and filtering functionalities (based on Wordpress add_action and add_filter)*

<small>Note: This class is static</small>

_Methods_

*add*<br />
// @array Event::add(string $event, function $callback[, $position=false])@<br />
adds callback to execute on event call, optional $position in queue. <br />
eg. [ @Event::add("header_finished", "myFunction");@ ]<br />
	Note: Callback is called internally on Event::fire("header_finished") like myFunction("header_finished");


*fire*<br />
// @array Event::fire(string $event)@<br />
fires all queued event functions in queue order<br />
eg. [ @Event::fire("header_finished");@ ]


*add_filter*<br />
// @string Event::add_filter(string $filter, function $callback[, $position=false])@<br />
adds filtering callback to execute on filter call, optional $position in queue.<br />
eg. [ @Event::add_filter("post_content", "myFunction");@ ]<br />
<small>Note: Callback is called internally on Event::filter("header_finished") like myFunction($str, "header_finished");</small>


*filter*<br />
// @string Event::filter(string $filter, string $str)@<br />
filters string $str through all queued event functions in queue order<br />
eg. [ @Event::filter("post_content", $post_content);@ ]




h3. -//######################## Mail


*3.15: Mail		.......... #Email functionalities*

<small>Note: This class is static</small>

_Methods_

*send*<br />
// @bool Mail::send(string $to, string $subject, string $body [, {options} $options])@<br />
send an email (enhanced mail() );<br />
available {options} - string 'from', string 'cc', string 'bcc', string 'reply-to', array 'attachments', string 'html'<br />
eg. [ @Mail::send(string $to, string $subject, string $body, array('attachments'=>array('image.jpg', 'readme.txt')));@ ]


*send_html*<br />
// @array Mail::send_html(string $to, string $subject, string $body [, {options} $options])@<br />
same as @Mail::send()@ but @$body@ should be html instead of plain text<br />
eg. [ @Mail::send_html("example&#64;example.com", "A subject", "Hello!<br /><br />kthxbye");@ ]




h3. -//######################## Image


*3.16: Image	.......... #Image manipulation class*

_Methods_

*Image*<br />
// @instance Image::__contruct(resource &$image, array $info [, {options} $options])@<br />
Create an image instance;<br />
@$info@ should be like: @list($info['width'], $info['height'], $info['type']) = getimagesize($options['path']);@<br />
available {options} - string 'folder', string 'basename', string 'bcc', string 'transparentColorRed', string 'transparentColorGreen', string 'transparentColorBlue'<br />
eg. [ @$Image_instance = new Image($image, $info);@ ]

*from_file*<br />
// @instance Image::from_file(string $filepath)@<br />
Create an instance directly from an image file;<br />
eg. [ @$Image_instance = Image::from_file("images/image.jpg");@ ]


*resize*<br />
// @void Image::resize(string $style)@<br />
eg. [ @$instance->resize("100x100#");@ ]<br />
@$style@ should be of the following:<br />
* 'scale'% ............. Height and width both scaled by specified percentage.
* 'scale-x'x'scale-y'% . Height and width individually scaled by specified percentages.
* 'width' .............. Width given, height automagically selected to preserve aspect ratio.
* x'height' ............ Height given, width automagically selected to preserve aspect ratio.
* 'width'x'height' ..... Maximum values of height and width given, aspect ratio preserved.
* 'width'x'height'^	.... Minimum values of width and height given, aspect ratio preserved.
* 'width'x'height'!	.... Width and height emphatically given, original aspect ratio ignored.
* 'width'x'height'&gt;	.... Change as per 'width'x'height' but only if an image dimension exceeds a specified dimension.
* 'width'x'height'&lt;	.... Same as 'width'x'height'^ but only if an image dimension is smaller than a specified dimension.
* 'width'x'height'#	.... Same as 'width'x'height'^ but centered and cropped to the 'not fit' dimension.


*children*<br />
// @void Image::children(array $styles)@<br />
@$styles@ is like @array('folder1'=>"300x300>", 'folder2'=>"100x100#")@<br />
eg. [ @$instance->children(array('thumb'=>"300x300>", 'preview'=>"100x100#"));@ ]


*save*<br />
// @void Image::save([{options} $options])@<br />
saves the current image<br />
available {options} - string 'folder', string 'basename', bool 'secure' (guarantees file uniqueness, true by default)<br />
eg. [ @$instance->save(array('folder'=>'uploads/images'));@ ]


*save_children*<br />
// @void Image::save_children([{options} $options])@<br />
saves all the dependent images created via @Image::children()@, creating a subfolder for each dependent image within the main save folder<br />
same options as @Image::save()@ but secure only acts on first image saved, consecutive images will have first's basename<br />
eg. [ @$instance->save_children(array('folder'=>'uploads/images'));@ ]


*save*<br />
// @void Image::save_all([{options} $options])@<br />
saves both this image and the dependent children<br />
same options as @Image::save()@, secure only acts on original image<br />
eg. [ @$instance->save_all(array('folder'=>'uploads/images'));@ ]

